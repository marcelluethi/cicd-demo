stages:
  - build
  - test
  - deploy

# Variables for CMake build
variables:
  BUILD_DIR: "build"

# Build job
build-server:
  stage: build
  image: gcc:latest  # Use a GCC Docker image that includes CMake and other build tools
  script:
    - apt-get update && apt-get install -y cmake
    # Create a build directory and navigate into it
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    # Run CMake to configure the build system and generate Makefiles
    - cmake ..
    # Build the project using Makefiles generated by CMake
    - cmake --build .
  artifacts:
    paths:
      - $BUILD_DIR/  # Store the build output as artifacts for other jobs (like deploy)


run-tests:
  stage: test
  image: gcc:latest
  dependencies:
    - build-server  # Use the build output from the previous build job
  script:
    - cd $BUILD_DIR
    # Run the tests using CTest (CMake's built-in testing tool)
    - ctest --output-on-failure
  allow_failure: false  # Mark the pipeline as failed if tests do not pass
  artifacts:
    when: always
    paths:
      - $BUILD_DIR/Testing/Temporary/LastTest.log  # Include the test log as an artifact

# Deploy the application to the remote server
deploy-to-server:
  stage: deploy
  environment: production
  only:
    - main
  script:
    # Step 1: Set up SSH key
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

    # Step 2: Rsync the built JAR file to the remote server
    - rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" $BUILD_DIR/src/hello_world_server $SSH_USER@$q:$SERVER_PATH

    # Step 3: SSH into the server and deploy
    # - ssh -i ~/.ssh/id_rsa -p 22 $SSH_USER@$SERVER_IP << EOF
    #     # Navigate to the server directory and stop the old server (if running)
    #     cd $SERVER_PATH || echo "Cannot change to directory"
        
    #     # Kill server if another one is running
    #     PID=\$(pgrep -f 'CDDemo-1.0-SNAPSHOT.jar')
    #     if [ -n "\$PID" ]; then
    #       kill \$PID
    #       echo "Waiting for process to terminate..."
    #       sleep 5  # Add a 5-second delay
    #     fi
        
    #     # Start the new server
    #     nohup java -jar $SERVER_PATH/CDDemo-1.0-SNAPSHOT.jar > output.log 2>&1 &
    # EOF

# Prevent simultaneous deployments (if necessary)
  interruptible: true

